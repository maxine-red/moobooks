#!/usr/bin/env ruby
# frozen_string_literal: true

# Copyright 2018 Maxine Michalski <maxine@furfind.net>
#
# This file is part of MooBooks.
#
# MooBooks is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# MooBooks is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with MooBooks.  If not, see <http://www.gnu.org/licenses/>.

require_relative '../lib/moobooks'
# rubocop:disable MethodLength
def print_help(help_param = false)
  puts 'Usage:',
       '  plushies app add <twitter|mastoon> [app_name]',
       '  plushies app list <twitter|mastoon>',
       '  plushies plush add <name> <rng|markov>',
       '  plushies plush list',
       '  plushies plush activate <plush>',
       '  plushies plush deactivate <plush>',
       '  plushies plush allow favoriting <plush>',
       '  plushies plush disallow favoriting <plush>',
       '  plushies plush allow reblogging <plush>',
       '  plushies plush allow favoriting <plush>',
       '  plushies plush disallow favoriting <plush>',
       '  plushies plush engine <plush_is> [<rng|markov>]',
       '  plushies account auth <twitter|mastodon> <app_id>',
       '  plushies account create <twitter|mastodon> <app_id> <account_name>'
  exit(help_param ? 0 : 1)
end
# rubocop:enable MethodLength

case cmd = ARGV.shift(2)
when ['-h']
  print_help(true)
when %w[app add]
  platform = ARGV.shift
  name = ARGV.shift
  warn 'Name can\'t be empty.' if name.nil?
  case platform
  when 'twitter'
    puts 'Please check your app\'s developer page to get it\'s data.'
    print 'Consumer key: '
    consumer_key = $stdin.gets.chomp
    print 'Consumer secret: '
    consumer_secret = $stdin.gets.chomp
    Moobooks::Twitter::App.create(name, consumer_key, consumer_secret)
  when 'mastodon'
    Moobooks::Mastodon::App.create(name)
  else
    warn "Unrecognized platform: #{platform}"
    print_help
  end
  puts 'Your app was successfully saved.'
when %w[app list]
  platform = ARGV.shift
  case platform
  when 'twitter'
    apps = Moobooks::Twitter::App.list.map(&:to_s).map { |a| "  #{a}" }
    puts 'Known twitter apps', apps
  when 'mastodon'
    Moobooks::Mastodon::App.create(name)
  else
    warn "Unrecognized platform: #{platform}"
    print_help
  end
when %w[plush add]
  name, engine = ARGV.shift(2)
  unless %w[rng markov].include?(engine)
    warn "Unknown engine type: #{engine}"
    print_help
  end
  if name.empty?
    warn 'Name can\'t be empty!'
    print_help
  end
  Moobooks::Plush.create(name, engine)
  puts "Added new plush \"#{name}\" to database."
when %w[plush list]
  plushies = Moobooks::Plush.list.map(&:to_s).map { |a| "  #{a}" }
  puts 'Registered plushies', plushies
when %w[plush activate]
  plush = ARGV.shift
  plush = plush.to_i if plush.match?(/^\d+$/)
  plush = Moobooks::Plush.new(plush)
  plush.activate!
  puts "Activated plush \"#{plush.name}\"."
when %w[plush deactivate]
  plush = ARGV.shift
  plush = plush.to_i if plush.match?(/^\d+$/)
  plush = Moobooks::Plush.new(plush)
  plush.deactivate!
  puts "Deactivated plush \"#{plush.name}\"."
when %w[account create]
  case platform = ARGV.shift
  when 'twitter'
    app = Moobooks::Twitter::App.new(ARGV.shift.to_i)
    client = Twitter::REST::Client.new(consumer_key: app.consumer_key,
                                       consumer_secret: app.consumer_secret)
    username = ARGV.shift
    if username.nil? || username.empty?
      warn 'Username can\'t be empty!'
      exit 1
    end
    user = client.user(ARGV.shift)
    Moobooks::Twitter::Account.create(user)
    puts "Created an account for \"#{user.name}\" in database."
  else
    warn "Unrecognized platform: #{platform}"
    print_help
  end
when %w[account auth]
  case platform = ARGV.shift
  when 'twitter'
    app = Moobooks::Twitter::App.new(ARGV.shift.to_i)
    auth_url, request = Moobooks::Twitter::Account.authorize(app)
    # consumer = OAuth2::Client.new(app.consumer_key, app.consumer_secret,
    #                             site: 'https://twitter.com', scheme: :header)
    # request_token = consumer.get_request_token
    # auth_url = request_token.authorize_url
    puts 'Please put this url into your browser:', auth_url
    loop do
      print 'Please enter your pin: '
      pin = $stdin.gets.chomp.to_i
      if pin.positive?
        token = Moobooks::Twitter::Account.tokenize(pin, request)
        break
      end

      warn 'Pleae enter a valid pin'
    end

    # token = request_token.get_access_token(oauth_verifier: pin)

    # client = Twitter::REST::Client.new do |c|
    # c.consumer_key = app.consumer_key
    # c.consumer_secret = app.consumer_secret
    # c.access_token = token.token
    # c.access_token_secret = token.secret
    # end
    Moobooks::Twitter::Account.create(client.user)
  else
    warn "Unrecognized platform: #{platform}"
    print_help
  end
else
  warn "Unknown command: #{cmd.join(' ')}"
  print_help
end
