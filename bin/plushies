#!/usr/bin/env ruby
# frozen_string_literal: true

# Copyright 2018 Maxine Michalski <maxine@furfind.net>
#
# This file is part of MooBooks.
#
# MooBooks is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# MooBooks is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with MooBooks.  If not, see <http://www.gnu.org/licenses/>.

require_relative '../lib/moobooks'

require 'logger'
require 'thread'

def print_help(help_param = false)
  puts 'Usage:',
       '  plushies post',
       '  plushies update'
  exit(help_param ? 0 : 1)
end

app_config = File.expand_path("#{__dir__}/../config/apps.json")
unless File.exist?(app_config)
  warn 'No app configuration present!'
  exit 1
end

log = Logger.new(File.expand_path("#{__dir__}/../log/plushies.log"), 'monthly')
log.level = Logger::INFO
log.formatter = proc do |sev, date, _prog, msg|
  "#{date.strftime('%b %e, %Y %e %r')} [#{sev[0, 1].upcase}]: #{msg}\n"
end

apps = JSON.parse(File.read(app_config), symbolize_names: true)

plush_config = File.expand_path("#{__dir__}/../config/plushies.json")
unless File.exist?(plush_config)
  warn 'No plush configuration present!'
  exit 1
end
plush_configs = JSON.parse(File.read(plush_config), symbolize_names: true)

cmd = ARGV.shift

plushies = plush_configs.map do |name, conf|
  Moobooks::Plush.new(name, conf, apps)
end

case cmd
when ['-h']
  print_help(true)
when 'post'
  plushies.shuffle.each do |plush|
    log.info "Plush \"#{plush.name}\" said: \"#{plush.post_status!}\""
    r = rand(60..209)
    log.info("Sleeping for #{r} seconds.")
    sleep r
  end
when 'reply'
  mt = Mutex.new
  threads = []
  plushies.shuffle.each do |pl|
    threads << Thread.new(pl) do |plush|
      mt.synchronize do
        log.debug "Plush \"#{plush.name}\" starts replying."
      end
      plush.clients[:twitter].mentions_timeline(count: 200).reverse.each do |m|
        unless (reply = plush.reply!(m)).nil?
          log.info "Plush \"#{plush.name}\" said: \"#{reply}\""
          r = rand(3..6)
          sleep r
        end
      end
    end
  end
  threads.each(&:join)
when 'update'
  plushies.each do |plush|
    corpus = JSON.parse(File.read("#{__dir__}/../corpora/#{plush.name}.json"),
                        symbolize_names: true).map do |t|
      Twitter::Tweet.new(t)
    end
    max_id = 2**61
    new_tweets = []
    16.times do
      new_tweets += plush.clients[:twitter].user_timeline(
        plush.originals[:twitter], max_id: max_id, count: 200,
                                   tweet_mode: 'extended'
      )
      log.info("Added #{new_tweets.count} tweets from "\
               "\"#{plush.originals[:twitter]}\" to \"#{plush.name}\"")
      max_id = new_tweets.min_by(&:id).id
      break if max_id <= corpus.max_by(&:id).id
    end
    corpus = (corpus + new_tweets).reject(&:retweeted?).sort_by(&:id)
                                  .map(&:attrs).uniq.reject do |t|
      t[:full_text].match(/^(RT|MT)/)
    end.to_json
    File.write("#{__dir__}/../corpora/#{plush.name}.json", corpus)
    corpus = JSON.parse(corpus, symbolize_names: true).map do |t|
      t[:full_text]
    end
    corpus = {
      statuses: corpus.reject { |t| t.match(/@\w+/) },
      mentions: corpus.select { |t| t.match(/@\w+/) }
    }
    model = Ebooks::Model.new.consume(corpus).to_json
    File.write("#{__dir__}/../models/#{plush.name}.json", model)
    log.info("Updated model for \"#{plush.name}\" ")
  end
else
  warn "Unknown command: #{cmd}"
  log.warn "Unknown command: #{cmd}"
  print_help
end
